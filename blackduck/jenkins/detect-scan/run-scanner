#!/usr/bin/env python3

import argparse
import hashlib
import json
import os
import string
import urllib.request

from subprocess import check_call

# Parse command line
parser = argparse.ArgumentParser(
    description='Run Synopsis Detect scanner for Black Duck'
)
parser.add_argument('--config', '-c',
                    help='Config JSON file containing Detect options')
parser.add_argument('--credentials', '-r', required=True,
                    help='File containing Black Duck Hub credentials')
parser.add_argument('--pdf', action='store_true',
                    help='Generate PDF of results')
parser.add_argument('--dry-run', '-n', action='store_true',
                    help="Dry run (do not upload scan to Hub)")
args = parser.parse_args()

# Read input config files
with open(args.credentials, "r") as t:
    creds = json.load(t)
if args.config is not None:
    with open(args.config, "r") as c:
        config = json.load(c)
else:
    config = { "detect_opts": {} }

# Download desired Detect jar, if necessary
cache_dir = os.path.join(
    os.environ.get("HOME"),
    ".cache",
    "synopsys-detect"
)
if not os.path.exists(cache_dir):
    os.makedirs(cache_dir, exist_ok=True)

detect_ver = os.environ.get("DETECT_JAR_VERSION", "7.10.0")
detect_jar = os.path.join(cache_dir, f"synopsys-detect-{detect_ver}.jar")
if not os.path.exists(detect_jar):
    # Ask Synopsys's Artifactory API for details, so we can verify checksum
    print(f"\n\n********\nDownloading {detect_jar}...")
    artifact_url = "https://sig-repo.synopsys.com/artifactory/api/storage" \
        "/bds-integrations-release/com/synopsys/integration/synopsys-detect" \
        f"/{detect_ver}/synopsys-detect-{detect_ver}.jar"
    try:
        res = urllib.request.urlopen(artifact_url)
        artifact = json.loads(res.read().decode("utf-8"))
        jar_url = artifact["downloadUri"]
        jar_sha256 = artifact["checksums"]["sha256"]

        urllib.request.urlretrieve(jar_url, detect_jar)

        # Verify checksum
        sha256_hash = hashlib.sha256()
        with open(detect_jar, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        if sha256_hash.hexdigest() != jar_sha256:
            print(
                "\n\nDownloaded file checksum did not match!!!!! Deleting..."
            )
            raise RuntimeError("Downloaded synopsys-detect.jar was invalid")

    except:
        if os.path.exists(detect_jar):
            os.remove(detect_jar)
        raise
    print("....done!\n********\n\n")

# Start with default properties, then update with config-file-provided
# ones; this allows config file to override defaults
properties = {
    "blackduck.api.token": creds["token"],
    "blackduck.url": creds["url"],
    "blackduck.trust.cert": "true",
    "detect.project.name": "${PRODUCT}",
    "detect.project.version.name": "${VERSION}",
    "detect.blackduck.signature.scanner.memory": 10240,
    "detect.timeout": 3600,
    "detect.accuracy.required": "NONE",
}
if args.dry_run:
    properties["detect.blackduck.signature.scanner.dry.run"] = "true"
    properties["detect.cleanup"] = "false"
elif args.pdf:
    # This argument makes the job wait until the scan is fully uploaded
    # to Black Duck Hub. But if "dry.run" is true, it doesn't upload
    # the signature scan results, therefore the scan will never be
    # fully uploaded. So we won't enable the .pdf generation if dry.run
    # is selected.
    properties["detect.risk.report.pdf"] = "true"

properties.update(config["detect_opts"])

# Construct command line by translating properties to args
detect_args = [
    "java", "-jar", detect_jar
]
if args.dry_run:
    # Suggested by Black Duck support
    detect_args.append("-d")
for prop, value in properties.items():
    detect_args.append(
        "--" + prop + "=" + string.Template(str(value)).safe_substitute(os.environ)
    )

# Special sauce for Python - needs to use a specific bd-venv which must
# have been pre-installed with all dependencies
# https://synopsys.atlassian.net/wiki/spaces/INTDOCS/pages/631276245/Package+Manager+Information#The-Pip-detector
source_root = os.path.join(os.environ.get("WORKSPACE", "."), "src")
venv_path = os.path.join(source_root, "..", "bd-venv")
if os.path.isdir(venv_path):
    detect_args.extend([
        "--detect.pip.path=" + os.path.join(venv_path, "bin", "pip"),
        "--detect.python.path=" + os.path.join(venv_path, "bin", "python")
    ])

# Iterate through code paths, calling scanner
first_path = True
for i, path in enumerate(config.get("source_paths", ['.']), start=1):
    suffix = f"-{i}" if i > 1 else ""
    source_path = os.path.join(source_root, path)
    path_args = [
        "--detect.source.path=" + source_path,
        "--detect.code.location.name=" + "${PRODUCT}/${VERSION}" + suffix,
        "--detect.project.codelocation.unmap=" + f"{first_path}"
    ]

    check_call(detect_args + path_args)

    first_path = False
