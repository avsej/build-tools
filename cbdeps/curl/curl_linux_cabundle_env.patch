diff --git a/CMakeLists.txt b/CMakeLists.txt
index 825577e2e..b335d2d34 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1124,6 +1124,9 @@ if(USE_NGHTTP2)
     if(NGHTTP2_CFLAGS)
       string(APPEND CMAKE_C_FLAGS " ${NGHTTP2_CFLAGS}")
     endif()
+  elseif("${CURL_CA_BUNDLE}" STREQUAL "env")
+    unset(CURL_CA_BUNDLE CACHE)
+    set(CURL_ENABLE_CA_BUNDLE_ENVVAR)
   else()
     set(USE_NGHTTP2 OFF)
   endif()
@@ -1553,7 +1556,7 @@ endif()
 #
 if(_curl_ca_bundle_supported)
   set(CURL_CA_BUNDLE "auto" CACHE
-    STRING "Path to the CA bundle. Set 'none' to disable or 'auto' for auto-detection. Defaults to 'auto'.")
+    STRING "Path to the CA bundle. Set 'none' to disable, 'auto' for auto-detection at build time, or 'env' for runtime setting from CURL_CA_BUNDLE in environment.. Defaults to 'auto'.")
   set(CURL_CA_FALLBACK OFF CACHE
     BOOL "Use built-in CA store of TLS backend. Defaults to OFF")
   set(CURL_CA_PATH "auto" CACHE
@@ -1562,7 +1565,7 @@ if(_curl_ca_bundle_supported)
     STRING "Path to the CA bundle to embed in the curl tool.")
 
   if(CURL_CA_BUNDLE STREQUAL "")
-    message(FATAL_ERROR "Invalid value of CURL_CA_BUNDLE. Use 'none', 'auto' or file path.")
+    message(FATAL_ERROR "Invalid value of CURL_CA_BUNDLE. Use 'none', 'auto', 'env', or file path.")
   elseif(CURL_CA_BUNDLE STREQUAL "none")
     unset(CURL_CA_BUNDLE CACHE)
   elseif(CURL_CA_BUNDLE STREQUAL "auto")
diff --git a/acinclude.m4 b/acinclude.m4
index 53c302cc0..eb2394710 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -1217,7 +1217,7 @@ AS_HELP_STRING([--without-ca-path], [Don't use a default CA path]),
     fi
   fi
 
-  if test "x$ca" = "xno" || test -f "$ca"; then
+  if test "x$ca" = "xno" || test "x$ca" = "xenv" || test -f "$ca"; then
     ca_warning=""
   fi
 
@@ -1241,7 +1241,11 @@ AS_HELP_STRING([--without-ca-path], [Don't use a default CA path]),
     capath_warning=""
   fi
 
-  if test "x$ca" != "xno"; then
+  if test "x$ca" = "xenv"; then
+    AC_DEFINE_UNQUOTED(CURL_ENABLE_CA_BUNDLE_ENVVAR, 1,
+      [Define to 1 to support loading CURL_CA_BUNDLE from env at runtime.])
+    AC_MSG_RESULT([use environment at runtime])
+  elif test "x$ca" != "xno"; then
     CURL_CA_BUNDLE="$ca"
     AC_DEFINE_UNQUOTED(CURL_CA_BUNDLE, "$ca", [Location of default ca bundle])
     AC_SUBST(CURL_CA_BUNDLE)
diff --git a/lib/curl_config.h.cmake b/lib/curl_config.h.cmake
index efaa8a459..cf44bd3ac 100644
--- a/lib/curl_config.h.cmake
+++ b/lib/curl_config.h.cmake
@@ -25,6 +25,9 @@
 /* Location of default ca bundle */
 #cmakedefine CURL_CA_BUNDLE "${CURL_CA_BUNDLE}"
 
+/* Whether to enable specifying CURL_CA_BUNDLE in environment */
+#cmakedefine CURL_ENABLE_CA_BUNDLE_ENVVAR 1
+
 /* define "1" to use built-in ca store of TLS backend */
 #cmakedefine CURL_CA_FALLBACK 1
 
diff --git a/lib/url.c b/lib/url.c
index 10e37ec67..e81cd20ef 100644
--- a/lib/url.c
+++ b/lib/url.c
@@ -429,7 +429,21 @@ CURLcode Curl_init_userdefined(struct Curl_easy *data)
    */
   if(Curl_ssl_backend() != CURLSSLBACKEND_SCHANNEL &&
      Curl_ssl_backend() != CURLSSLBACKEND_SECURETRANSPORT) {
-#ifdef CURL_CA_BUNDLE
+#if defined(CURL_ENABLE_CA_BUNDLE_ENVVAR)
+    char *env;
+    env = curl_getenv("CURL_CA_BUNDLE");
+    if(env) {
+      result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], env);
+      if (result)
+        return result;
+
+      result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY], env);
+      if (result)
+        return result;
+
+      curl_free(env);
+    }
+#elif defined(CURL_CA_BUNDLE)
     result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], CURL_CA_BUNDLE);
     if(result)
       return result;
