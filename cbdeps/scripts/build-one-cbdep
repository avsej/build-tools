#!/usr/bin/env bash

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${SCRIPT_DIR}/../../utilities/shell-utils.sh

# This is only for interactive use; when running on Jenkins, this script
# still expects to find all of these variables set in the environment.
usage() {
    echo "Usage: $0 -p PRODUCT -r RELEASE -v VERSION -b BLD_NUM -a ARCH -f PLATFORM -l PROFILE [-i]"
    exit 1
}

INSTALL=false

while getopts "p:r:v:b:a:f:l:ih?" opt; do
    case $opt in
        p) PRODUCT=$OPTARG;;
        r) RELEASE=$OPTARG;;
        v) VERSION=$OPTARG;;
        b) BLD_NUM=$OPTARG;;
        a) ARCH=$OPTARG;;
        f) PLATFORM=$OPTARG;;
        l) PROFILE=$OPTARG;;
        i) INSTALL=true;;
        h|?) usage;;
        *) echo "Invalid argument $opt"
           usage;;
    esac
done

chk_set PRODUCT
chk_set RELEASE
chk_set VERSION
chk_set BLD_NUM
chk_set ARCH
chk_set PLATFORM
chk_set PROFILE

# One special-case for cross-compiling Windows; it always wants to be
# arch "amd64". build-one-cbdep.bat enforces this, so we also do it
# here.
if [ "${PLATFORM}" = "windows" -a "${ARCH}" = "x86_64" ]; then
    ARCH=amd64
fi

PROD_NAME=${PRODUCT#"cbdeps::"}
PROD_PATH=${PRODUCT//::/\/}

# Un-tarred build source tarball expected to live in this directory.
# Output will be put into ${ROOT_DIR}/install and ${ROOT_DIR}/packages.
if [ -z "${WORKSPACE}" ]; then
    ROOT_DIR=$(pwd)
else
    ROOT_DIR="${WORKSPACE}"
fi
cd "${ROOT_DIR}"

# Ensure latest cbdep tool is on path
mkdir -p tools
CBDEP_URL=https://packages.couchbase.com/cbdep/cbdep-$(uname -s | tr '[A-Z]' '[a-z]')-$(uname -m)
if [ ! -e tools/cbdep ]; then
    curl -Lf -o tools/cbdep ${CBDEP_URL}
    chmod 755 tools/cbdep
fi
export PATH=$(pwd)/tools:${PATH}

# Hacky fix for inconsistent naming of MacOS
if [ "${PLATFORM}" == "macos" ]; then
    export PLATFORM=macosx
fi

if [ "${PLATFORM}" == "macosx" ]; then
    if [ "$(uname -m)" == "x86_64" ]; then
        export MACOSX_DEPLOYMENT_TARGET=10.15
    else
        export MACOSX_DEPLOYMENT_TARGET=12.0
    fi
fi

# Backwards compatibility for old naming of Server cbdeps
if [ "${PROFILE}" != "server" ]; then
    export BLD_NUM="${BLD_NUM}_${PROFILE}"
fi

TARBALL_NAME=${PROD_NAME}-${PLATFORM}-${ARCH}-${VERSION}-${BLD_NUM}.tgz
MD5_NAME=${PROD_NAME}-${PLATFORM}-${ARCH}-${VERSION}-${BLD_NUM}.md5

echo "Performing build..."
PACKAGE_DIR="$( cd "$SCRIPT_DIR/../${PROD_NAME}" && pwd )" # build-tools/cbdeps/PACKAGE
INSTALL_DIR=${ROOT_DIR}/install
rm -rf ${INSTALL_DIR}
mkdir -p ${INSTALL_DIR}

# Create META directory for any cbdeps-specific metadata
mkdir ${INSTALL_DIR}/META

# If this is a Go-built cbdeps package, save the Go version used.
# Note: this isn't replicated in build-one-cbdep.bat, because Go
# cbdeps for Windows are generally cross-compiled on Linux.
gover=$(gover_from_manifest)
if [ -n "${gover}" ]; then
    echo "${gover}" > ${INSTALL_DIR}/META/go-version.txt
fi

# We tuck the black-duck-manifest, if any, into the Linux x86_64 package
# since that's where the BD scans run.
if [ "${PLATFORM}" == "linux" -a "${ARCH}" == "x86_64" ]; then
    BD_MANIFEST="${INSTALL_DIR}/META/blackduck/${PROD_NAME}-black-duck-manifest.yaml"
    mkdir "${INSTALL_DIR}/META/blackduck"

    # If the package has a simple one-component BD manifest template,
    # substitute in the version. The manifest may specify an alternative
    # version appropriate for BD. For packages with more complex
    # requirements, simply write the final manifest as part of the
    # <pkg>_unix.sh script when $9 is set.
    if [ -e "${PACKAGE_DIR}/black-duck-manifest.yaml.in" ]; then
        BD_VERSION=$(annot_from_manifest BD_VERSION "${VERSION}")
        echo "Populating black-duck-manifest.yaml..."
        cat "${PACKAGE_DIR}/black-duck-manifest.yaml.in" \
            | sed -e "s/@@BD_VERSION@@/${BD_VERSION}/g" \
            > "${BD_MANIFEST}"
    fi
fi

${PACKAGE_DIR}/${PROD_NAME}_unix.sh ${INSTALL_DIR} ${ROOT_DIR} ${PLATFORM} ${PROFILE} ${RELEASE} ${VERSION} ${BLD_NUM} ${ARCH} ${BD_MANIFEST}

echo "Preparing for package..."
PACKAGE=${PACKAGE_DIR}/package
if [ -d ${PACKAGE} ]; then
    cp -pr ${PACKAGE}/* ${INSTALL_DIR}
fi
echo ${VERSION}-${BLD_NUM} > ${INSTALL_DIR}/VERSION.txt

echo "Create package..."
PKG_DIR=${ROOT_DIR}/packages/${PROD_NAME}/${VERSION}/${BLD_NUM}
rm -rf ${PKG_DIR}
mkdir -p ${PKG_DIR}
cd ${INSTALL_DIR}
tar zcf ${PKG_DIR}/${TARBALL_NAME} .
md5sum ${PKG_DIR}/${TARBALL_NAME} > ${PKG_DIR}/${MD5_NAME}

if ${INSTALL}; then
    cp -p ${PKG_DIR}/* ~/.cbdepscache
fi
